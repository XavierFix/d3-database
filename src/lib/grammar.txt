  start             = entry+

  entry             = space '(' space p:program+ space ')' space 
                    { return p; }

  program           = entry / clean_spec / func_spec / spec / signifier

  spec              = w:signifier space ind:(entry/func_spec/spec/signified/variable)+ space
                      { return { op: w, exp:[].concat.apply([], ind) } }

  clean_spec        = ('clean' colon)? cf:function space
                      { return { op: 'clean', exp: [ cf ] } }

  func_spec         = sign:signifier space func:function+ { return { op: sign, exp: func } }

  signifier         = si:(string/bare_word) space colon space { return si }
  signified         = sd:(param_hash/short_hash/array/boolean/string/number) { return sd }

  short_hash        = space '{' space sp:bare_word+ space '}' { return { short_params: sp } ; }
  param_hash        = space '{' space pa:params+ space '}' { return pa; }
  params            = bs:(bare_word/string) space colon space arg:(string/number/variable) comma? space 
                      { return [ bs, arg ] }

  boolean           = b:('true'/'false') { return b }

  string            = space quote str:(mandatory_space/letter)+ quote space { return str.join(''); }
  letter            = [^"' \n]


  function          = space '#' space cu:curly space { return { op: 'function', exp: cu.join('').trim() } }
  curly             = '{' c:([^{}]/ic)* '}' { return [].concat.apply([], c) }
  ic                = ic:('{' [^{}]* '}') { return [].concat.apply([], ic) }

  variable          = v:bare_word { return { variable: v } }
  bare_word         = t:text+ space { return t.join(""); }
  text              = [a-zA-Z0-9-._]

  array             = '[' space nn:number+ ']' { return [nn] }
  number            = d:digit+ comma? space { return +(d.join(''));  }
  digit             = [0123456789.-]

  space             = comment / [ \n]* / !.
  mandatory_space   = comment / [ \n]+ / !.

  colon             = [:]
  comma             = [,]
  quote             = ["']

  comment           = '//' [^\n]* [\n]